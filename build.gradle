buildscript {
  configurations.classpath {
    resolutionStrategy {
      //This is required by 'grgit' version '4.1.1':
      force 'org.eclipse.jgit:org.eclipse.jgit:5.13.0.202109080827-r'
    }
  }
}

plugins {
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.ajoberstar.git-publish' version '3.0.1'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'de.marcphilipp.nexus-publish' version '0.4.0' apply false
    id 'net.researchgate.release' version '3.0.2'
    id 'io.codearte.nexus-staging' version '0.22.0'
}

wrapper {
    gradleVersion = '7.3.3'
}

String groupId = 'com.unblu.tools'

subprojects {
    apply plugin: 'java'
    apply plugin: 'signing'
    apply plugin: 'de.marcphilipp.nexus-publish'
    apply plugin: 'maven-publish'

    group = groupId

    signing {
        useGpgCmd()
        sign(publishing.publications)
    }

    tasks.withType(Sign) {
        onlyIf {
            project.hasProperty('signing.gnupg.keyName')
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()

        compileJava.options.encoding = "UTF-8"
        toolchain {
            languageVersion = JavaLanguageVersion.of(8)
        }
    }

    repositories {
        mavenCentral()
    }

    nexusPublishing {
        repositories {
            sonatype {
                nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
                username = project.findProperty('sonatypeUser') ?: ''
                password = project.findProperty('sonatypePassword') ?: ''
            }
        }
    }
}

nexusStaging {
    serverUrl = "https://s01.oss.sonatype.org/service/local/"
    packageGroup = 'com.unblu'
    username = project.findProperty('sonatypeUser') ?: ''
    password = project.findProperty('sonatypePassword') ?: ''
}

def buildDate() {
    return new Date().format('yyyy-MM-dd')
}

configurations {
    asciidoctorExtensions
}

asciidoctorj {
    version = "2.5.2"
}

asciidoctor {
    configurations 'asciidoctorExtensions'
    sourceDir = file('docs')
    baseDirFollowsSourceFile()
    outputDir = file('build/docs/html5')
    attributes = ['revdate'               : "${buildDate()}",
                  'project-version'       : "$version",
                  'artifacts-version-mvn' : "$lastVersion",
                  'gh-repo-owner'         : "$githubRepositoryOwner",
                  'gh-repo-name'          : "$githubRepositoryName",
                  'source-highlighter'    : 'coderay',
                  'imagesdir'             : '',
                  'toc'                   : 'left',
                  'toclevels'             : '3',
                  'icons'                 : 'font',
                  'sectanchors'           : 'true',
                  'idprefix'              : '',
                  'idseparator'           : '-',
                  'docinfo1'              : 'true']
    repositories {
        mavenCentral()
    }
    dependencies {
        asciidoctorExtensions 'fr.jmini.asciidoctorj:git-link:3.2.1'
    }
}

gitPublish {
    repoUri = 'git@github.com:' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '.git'
    branch = 'gh-pages'

    contents {
        from "${file('build/docs/html5')}"
    }

    preserve {
        include '.nojekyll'
    }

    commitMessage = "Update the 'gh-pages' branch."
}

release {
    buildTasks = ['releaseBuild']
}

task releaseBuild {
    dependsOn(
            'checkLastVersionValue',
            'clean',
            'build',
            project.getTasksByName('publishToSonatype', true),
            'asciidoctor',
            'gitPublishPush'
    )
}

tasks.register('checkLastVersionValue') {
    doLast {
        if(version.endsWith('SNAPSHOT')) {
            throw new GradleException("version '$version' ends with SNAPSHOT, this is not a release build!")
        }
        if(lastVersion != version) {
            throw new GradleException("lastVersion '$lastVersion' does not match version '$version', fix it in the 'gradle.properties' file.")
        }
    }
}

def updateLastVersionValueTask = tasks.register('updateLastVersionValue') {
    doLast {
        def propertiesFile = file('gradle.properties')
        def content = propertiesFile.text
        content = content.replaceAll("lastVersion=[0-9\\.]+", "lastVersion=" + version.replace('-SNAPSHOT', ''))
        propertiesFile.text = content
    }
}

model {
    tasks.unSnapshotVersion {
        dependsOn updateLastVersionValueTask
    }
    tasks.gitPublishCopy {
        dependsOn asciidoctor
    }
}
